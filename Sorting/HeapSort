#include <iostream>
using namespace std;

// Function to heapify a subtree rooted with node i
void heapify(int arr[], int n, int i) {
    int left = 2 * i;           // Left child (1-based index)
    int right = 2 * i + 1;      // Right child (1-based index)

    // If left child is larger than root
    if (left <= n && arr[left] > arr[i]) {
        swap(arr[i], arr[left]);
        heapify(arr, n, left);  // Recursively heapify the left child
    }

    // If right child is larger than root
    if (right <= n && arr[right] > arr[i]) {
        swap(arr[i], arr[right]);
        heapify(arr, n, right); // Recursively heapify the right child
    }
}

// Function to perform heap sort
void heapSort(int arr[], int n) {
    // Build a max heap (1-based indexing)
    for (int i = n / 2; i >= 1; i--) {
        heapify(arr, n, i);
    }

    // Extract elements from heap one by one
    for (int i = n; i > 1; i--) {
        // Move current root to end
        swap(arr[1], arr[i]);

        // Call max heapify on the reduced heap
        heapify(arr, i - 1, 1);
    }
}

// Function to print an array
void printArray(int arr[], int n) {
    for (int i = 1; i <= n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int arr[] = {-1, 12, 11, 13, 5, 6, 7}; // Starting from index 1, index 0 is unused
    int n = sizeof(arr) / sizeof(arr[0]) - 1;

    cout << "Original array: ";
    printArray(arr, n);

    heapSort(arr, n);

    cout << "Sorted array: ";
    printArray(arr, n);

    return 0;
}
